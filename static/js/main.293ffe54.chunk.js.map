{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","calc","setCalc","result","setResult","ops","updateCalc","value","includes","slice","eval","toString","createDigits","digits","i","push","onClick","calculate","deleteLast","className"],"mappings":"wLAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,qmBCZA,SAASY,MACP,cAAwBG,oDAAS,IAAjC,kMAAOC,KAAP,cAAaC,QAAb,cACA,WAA4BF,oDAAS,IAArC,mMAAOG,OAAP,cAAeC,UAAf,cAEMC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAE3BC,WAAa,SAAbA,WAAaC,OAEfF,IAAIG,SAASD,QAAmB,KAATN,MACvBI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,KAAKQ,OAAO,MAOlDP,QAAQD,KAAOM,OAEVF,IAAIG,SAASD,QAChBH,UAAUM,KAAKT,KAAOM,OAAOI,cAI3BC,aAAe,WAGnB,IAFA,IAAMC,EAAS,GADU,WAGhBC,GACPD,EAAOE,KACL,qEACQC,QAAS,kBAAMV,WAAWQ,EAAEH,aADpC,SAGSG,GADIA,KAJRA,EAAI,EAAGA,EAAI,GAAIA,IAAK,EAApBA,GAST,OAAOD,GAGHI,UAAY,SAAZA,YACJf,QAAQQ,KAAKT,MAAMU,aAGfO,WAAa,SAAbA,aACJ,GAAa,KAATjB,KAAJ,CAGII,IAAIG,SAASD,MAAME,OAAO,IAC5BL,UAAUM,KAAKH,MAAMI,WAAWF,MAAM,GAAG,KAGzCL,UAAUM,KAAKH,MAAMI,aAEzB,IAAMJ,MAAQN,KAAKQ,MAAM,GAAI,GAC3BP,QAAQK,SAGV,OACE,kEAAKY,UAAU,MAAf,SAEE,mEAAKA,UAAU,aAAf,UACE,mEAAKA,UAAU,UAAf,UACGhB,OAAS,kFAAQA,OAAR,OAA0B,GADtC,OAEGF,MAAQ,OAEX,mEAAKkB,UAAU,YAAf,UACA,qEAAQH,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEA,qEAAQU,QAASE,WAAjB,oBAGA,mEAAKC,UAAU,SAAf,UACGP,eACH,qEAAQI,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEA,qEAAQU,QAASC,UAAjB,uBASOpB,4B","file":"static/js/main.293ffe54.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useState } from 'react'\n\n\n\nfunction App() {\n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const ops = ['/', '*', '-', '+', '.'];\n\n  const updateCalc = value => {\n    if (\n      ops.includes(value) && calc === '' ||\n      ops.includes(value) && ops.includes(calc.slice(-1)\n      )\n    ){\n      return;\n    }\n\n\n    setCalc(calc + value);\n\n    if (!ops.includes(value)) {\n      setResult(eval(calc + value).toString());\n    }\n  }\n\n  const createDigits = () => {\n    const digits = [];\n\n    for (let i = 1; i < 10; i++){\n      digits.push(\n        <button \n                onClick={() => updateCalc(i.toString())}  \n                key={i}>  \n                {i}  \n        </button>\n      )\n    }\n    return digits;\n  }\n\n  const calculate = () => {\n    setCalc(eval(calc).toString())\n  }\n\n  const deleteLast = () => {\n    if (calc === '') {\n      return;\n    }\n    if (ops.includes(value.slice(-1))) {\n      setResult(eval(value.toString().slice(0,-1)));  \n    }\n    else{\n      setResult(eval(value.toString()));  \n    }\n  const value = calc.slice(0, -1);\n    setCalc(value);\n  }\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"calculator\">\n        <div className=\"display\">\n          {result ? <span>({result})</span> : ''}&nbsp; \n          {calc || \"0\"}\n        </div>\n        <div className=\"operators\">\n        <button onClick={() => updateCalc('/')}>/</button>\n        <button onClick={() => updateCalc('*')}>*</button>\n        <button onClick={() => updateCalc('-')}>-</button>\n        <button onClick={() => updateCalc('+')}>+</button>\n\n        <button onClick={deleteLast}>DEL</button>\n        </div>\n\n        <div className=\"digits\">\n          {createDigits() }\n        <button onClick={() => updateCalc('0')}>0</button>\n        <button onClick={() => updateCalc('.')}>.</button>\n\n        <button onClick={calculate}>=</button >\n        </div>\n        \n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}